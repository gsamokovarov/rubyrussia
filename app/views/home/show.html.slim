section.center
  h2 üëã

section.center
  h2 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ

section.center
  img.inline src=image_path("me.png")
  h2 –ì–µ–Ω–∞–¥–∏ –°–∞–º–æ–∫–æ–≤–∞—Ä–æ–≤

section.center.fragment
  h2 <strike>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ</strike>

section.center
  h2 –ó–¥—Ä–∞–≤–µ–π—Ç–µ

section.center
  img.inline src=image_path("me.png")
  h2 –ì–µ–Ω–∞–¥–∏ –°–∞–º–æ–∫–æ–≤–∞—Ä–æ–≤

section.center
  img.inline src=image_path("me.png")
  h2 Genadi Samokovarov

section.center
  a(href="https://twitter.com/gsamokovarov") twitter.com/gsamokovarov

section.center
  a(href="https://github.com/gsamokovarov") github.com/gsamokovarov

section.center
  a href="https://receipt-bank.com"
    img.inline src="https://www.receipt-bank.com/us/wp-content/themes/receipt-bank/dist/images/rb-logo.svg"

section.center data-background-iframe="https://www.receipt-bank.com/us/"
  a(href="#" class="navigate-next") &gt;

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/2000px-Flag_of_Bulgaria.svg.png"
  h2.white.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background="https://www.mapsland.com/maps/europe/bulgaria/large-location-map-of-bulgaria.jpg"
  h2.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center
  p –ê –ë –í –ì –î –ï –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –¨ –Æ –Ø
  hr
  p –∞ –± –≤ –≥ –¥ –µ –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —å —é —è
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Cyrillic_script"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/c/cd/Sanny_beach._Foto_by_Victor_Belousov._-_panoramio_-_Victor_Belousov_%284%29.jpg"
  h2.white.shadow Sunny Beach
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Sunny_Beach"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/e/ee/Bulgaria-Sunny_Beach-03.jpg"
  h2.white.shadow Sunny Beach
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Sunny_Beach"

section.center data-background="https://cdn2.wanderlust.co.uk/media/2637/articles-public-mineral-baths-sofia-bulgaria-dreamstime.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section.center data-background="https://processflows.co.uk/wp-content/blogs.dir/1/files/2015/01/bpoFotolia_29276575_M-1.jpg"
  h2.white.shadow Sofia
  = copyright "ProcessFlows", "https://processflows.co.uk"

section.center data-background="#FCD846"
  a href="https://balkanruby.com"
    img.inline src=image_path("balkan.svg")
  p 15‚Äì16 May, 2020

section.center data-background="https://upload.wikimedia.org/wikipedia/en/f/f3/Flag_of_Russia.svg"
  h2.white.shadow Russia

section data-background="https://processflows.co.uk/wp-content/blogs.dir/1/files/2015/01/bpoFotolia_29276575_M-1.jpg"
  h2.white.shadow.fragment –¶–∞—Ä –û—Å–≤–æ–±–æ–¥–∏—Ç–µ–ª
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Alexander_II_of_Russia"

section data-background="https://processflows.co.uk/wp-content/blogs.dir/1/files/2015/01/bpoFotolia_29276575_M-1.jpg"
  h2.white.shadow –¶–∞—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—ä—Ä II
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Alexander_II_of_Russia"

section data-background="https://upload.wikimedia.org/wikipedia/commons/1/14/Tsar_Alexander_II_1881.jpg"
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Alexander_II_of_Russia"

section.center data-background="http://popkult.org/wp-content/uploads/2017/01/masha_i_medved_1-1.jpg"
  = copyright "Wikipedia", "https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%88%D0%B0_%D0%B8_%D0%9C%D0%B5%D0%B4%D0%B2%D0%B5%D0%B4%D1%8C"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/d/d3/Gaudi_arena.jpg"
  h2.white.shadow –¢–∞—Ç—É
  = copyright "Wikipedia", "https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D1%82%D1%83_(%D0%B3%D1%80%D1%83%D0%BF%D0%BF%D0%B0)"

section.center data-background="https://www.foxsportsasia.com/uploads/2018/11/VP.jpg"
  = copyright "Liquipedia", "https://liquipedia.net/dota2/Virtus.pro"

section.center data-background="https://i.ytimg.com/vi/QIjKijhv1OU/maxresdefault.jpg"
  = copyright "YouTube", "https://www.youtube.com/user/NocturnoPlays"

section.center data-background=image_path("bearhug.gif")
section.center data-background="https://1.bp.blogspot.com/-3qWb21vq4Jo/Wx1BzowhEcI/AAAAAAAA8Fc/o48X7L48KdgcUecPnA2r2K2JH-FO4xnZwCLcBGAs/s1600/%25D0%25A0%25D0%2590%25D0%259B%25D0%2598%2B%25D0%25BC%25D0%25BE%25D1%2581%25D0%25BA%25D0%25B2%25D0%25B8%25D1%2587%25D0%25B8%2B1.jpg"

section.center data-background="http://24-7-365.ru/image/cache/catalog/vodki_nastoyki_nalivki_213/3163949H-800x800.jpg"
  = copyright "Wikipedia", "https://ru.wikipedia.org/wiki/%D0%92%D0%BE%D0%B4%D0%BA%D0%B0"

section.center data-background="https://www.ebag.bg/product/12885/images/0/800"
  = copyright "Wikipedia", "https://ru.wikipedia.org/wiki/%D0%92%D0%BE%D0%B4%D0%BA%D0%B0"

section.center data-background="https://s12emagst.akamaized.net/products/14822/14821377/images/res_daa1ea5551b2643bfebb8668f6cbbc2a_full.jpg"
section.center data-background=image_path("semki_garbage.jpg")

section.center data-background=image_path("squat_serj.jpeg")

section.center
section.center data-background="https://upload.wikimedia.org/wikipedia/commons/e/e5/Communist_countries.svg"
  h2.shadow.fragment ‚ò≠

section.center data-background="https://media.gettyimages.com/photos/north-korean-president-kim-il-sung-and-his-bulgarian-counterpart-picture-id544759487"
  h2.white.shadow ‚ò≠

section.center data-background="#F00"
  h2.white.fragment Break
  h4.white.fragment debugger in plain Ruby

section
  h2 Agenda
  p &nbsp;
  p &nbsp;
  ol
    li style="margin: 0 20%; text-align: left" Debugging and available debuggers üé≠
    li style="margin: 0 20%; text-align: left" A History of Ruby Debuggers üá∑üá∫
    li style="margin: 0 20%; text-align: left" Musings about the Ruby Debugging APIs ü§î
    li style="margin: 0 20%; text-align: left" Break üî®

section.center data-background="#F00" data-background-transition="fade"
  h2.white Debugging and available debuggers üé≠

section.center
  .fragment
    p A debugger (or <span class="red">Debugging tool</span>) is a computer program that is used to test and debug other programs.
    br
    a href="https://en.wikipedia.org/wiki/Debugger" https://en.wikipedia.org/wiki/Debugger

section.center
  h2 <span class="fragment">ü§î</span>

section.center
  h2.fragment Kernel#puts

section.center
  h2 üëç

section.center
  a href="https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html" I am a puts debuggerer

section.center data-background-iframe="https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html"
  a(href="#" class="navigate-next") &gt;

section.center
  h2 Binding#pry

section.center
  h2 Binding#irb

section.center
  h2 üëå

section.center
  h2.fragment Debase & Byebug

section.center
  a href="https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html" Real‚Ñ¢Ô∏è  Debuggers! üòÇ

section.center data-background="#000"
  p.white Interrupt the debugged program.

section.center data-background="#000" data-background-transition="none"
  p.white Give you control over its execution.

section.center data-background="#000" data-background-transition="none"
  p.white Let you step-into method calls.

section.center data-background="#000" data-background-transition="none"
  p.white Let you step-out of method calls.

section.center data-background="#000" data-background-transition="none"
  p.white Let you step-over of method calls.

section.center data-background-iframe="/console"
  a(href="#" class="navigate-next") &gt;

section.center data-background="#00F"
  h2.white A History of Ruby Debuggers üá∑üá∫

section.center data-background="#000"
  h2.fragment.white debug.rb

section.center
  h2.fragment ü§ö

section.center
  p Debugger in the standard library!

section.center
  a href="https://github.com/ruby/ruby/blob/3db12e8b236ac8f88db8eb4690d10e4a3b8dbcd4/lib/debug.rb" Part of the initial CVS to SVN import during January 1998 üïî

section.center
  pre(contenteditable=true): code.ruby
    '
      require "debug"

section.center data-background-iframe="/console"
  a(href="#" class="navigate-next") &gt;

section.center
  h2 üòÄ

section.center
  p Available everywhere.

section.center
  p GDB like user-interface.

section.center
  h2.fragment ‚òπÔ∏è

section.center
  p GDB like user-interface.

section.center
  p How do you invoke it twice in the same program run?

section.center
  p Last significant commit from 2013.

section.center
  p Uses <span class="red">Kernel#set_trace_func</span>

section.center data-background="#000"
  h2.fragment.white Kernel#set_trace_func

section.center
  p Invokes a proc on significant VM events.

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "call"
          # A Ruby method is called.
        end
      }

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "class"
          # A class or module is opened.
        end
      }

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "end"
          # A class or module is closed.
        end
      }

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "line"
          # A new line of code is executed.
        end
      }

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "raised"
          # An exception is raised.
        end
      }

section.center
  pre(contenteditable=true): code.ruby
    '
      set_trace_func -> event, file, line, id, binding {
        case event
        when "return"
          # A Ruby method returns.
        end
      }

section.center
  p Soft deprecated in favour of the more modern <span class="red">TracePoint</span> API.

section.center data-background="#000" data-background-transition="none"
  p.white Why is <span class="red">Byebug</span> written in C?

section.center data-background="#000" data-background-transition="none"
  h2 ü§î

section.center data-background="#F00"
  h2.white Performance

section.center
  p <span class="red">Kernel#set_trace_func</span> is slow.

section.center
  p Invokes the proc for any event, even if you don't need to listen to it.

section.center data-background="#000"
  h2.white TracePoint API

section.center
  p Provides Object-Oriented API, similar to the functionality of <span class="red">Kernel#set_trace_func</span>.

section.center
  p Can listen only to specific events.

section.center
  p Can easily stop tracing the program.

section.center
  p Available in <span class="red">Ruby</span> and <span class="red">C</span>.

section.center
  pre(contenteditable=true): code.ruby
    '
      TracePoint.trace(:line, :call, :return) do |trace|
        case trace.event
        when :call
          current.frames &lt;&lt; trace.binding
          current.depth += 1
        when :return
          current.frames.pop
          current.depth -= 1
        when :line
          next if current.depth.positive?

          trace.disable

          context = Context.new(*current.frames[0...-1], trace.binding)
          context.start
        end
      end

section.center data-background="#000"
  h3.white Events

section.center
  h3 line
  p execute code on a new line

section.center
  h3 class
  p start a class or module definition

section.center
  h3 end
  p finish a class or module definition

section.center
  h3 call
  p call a Ruby method

section.center
  h3 return
  p return from a Ruby method

section.center
  h3 c_call
  p call a C-language routine

section.center
  h3 c_return
  p return from a C-language routine

section.center
  h3 raise
  p raise an exception

section.center
  h3 b_call
  p event hook at block entry

section.center
  h3 b_return
  p event hook at block ending

section.center
  h3 thread_begin
  p event hook at thread beginning

section.center
  h3 thread_end
  p event hook at thread ending

section.center
  h3 fiber_switch
  p event hook at fiber switch

section.center
  h2 ü§î

section.center
  h2 ruby-debug

section.center
  p ruby-debug is a fast implementation of the standard debugger <span class="red">debug.rb</span>.

section.center
  p An old debugger for <span class="red">Ruby 1.8</span> and, eventually, <span class="red">Ruby 1.9</span>.

section.center
  img.inline src="https://upload.wikimedia.org/wikipedia/commons/1/1a/JetBrains_Logo_2016.svg"

section.center
  h1 üôá‚Äç‚ôÇÔ∏è

section.center data-background="#FFF"
  h3 Ruby 1.8
  a href="https://github.com/ruby-debug/ruby-debug" github.com/ruby-debug/ruby-debug

section.center data-background="#DDD"
  h3 Rewritten for Ruby 1.9
  a href="https://github.com/ruby-debug/ruby-debug-base19" github.com/ruby-debug/ruby-debug-base-19

section.center data-background="#BBB"
  h3 Fork for Ruby 2.x ‚ùì
  a href="https://github.com/cldwalker/debugger" github.com/ruby-debug/cldwalker/debugger

section.center data-background="#999"
  h3 Fork for Ruby 2.x üëå
  a href="https://github.com/ko1/debugger2" github.com/ruby-debug/ko1/debugger2

section.center data-background="#777"
  h3 Rewrite for Ruby 2.x üëå
  a href="https://github.com/denofevil/debase" github.com/denofevil/debase

section.center data-background="#555"
  h3 Unexported Ruby headers
  a href="https://github.com/cldwalker/debugger-ruby_core_source" github.com/cldwalker/debugger-ruby_core_source

section.center
  p.fragment The <span class="red">TracePoint API</span> solves most of the problems that sprouted the existence of <span class="red">ruby-debug</span>.

section.center
  p Writing debuggers back in the days was way more convoluted. üëµ


section.center data-background="#F00"
  h2.white Musings about the Ruby Debugging APIs ü§î

section.center data-background="#F0F"
  h2.white Why use C? ü§î

section.center data-background="#F00"
  h2.white Post-Mortem Debugging

section.center
  p Post-mortem debugging is debugging of the program after it has already crashed.

section.center data-background="#F00"
  h2.white Pry-open the VM stack frames

section.center
  h3 Kernel#caller
  p.red Array[String]

section.center
  pre(contenteditable=true): code
    '
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/workspace.rb:85:in `eval'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/workspace.rb:85:in `evaluate'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/context.rb:385:in `evaluate'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:493:in `block (2 levels) in eval_input'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:647:in `signal_status'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:490:in `block in eval_input'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `loop'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `catch'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:489:in `eval_input'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:428:in `block in run'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:427:in `catch'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:427:in `run'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/2.6.0/irb.rb:383:in `start'
      /Users/genadi/.rbenv/versions/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `top (required)'
      /Users/genadi/.rbenv/versions/2.6.2/bin/irb:23:in `load'
      /Users/genadi/.rbenv/versions/2.6.2/bin/irb:23:in `main'

section.center
  h3 Kernel#caller_locations
  p.red Array[Thread::Backtrace::Location]

section.center
  pre(contenteditable=true): code
    '
      . Thread::Backtrace::Location#absolute_path
      . Thread::Backtrace::Location#label
      . Thread::Backtrace::Location#base_label
      . Thread::Backtrace::Location#lineno
      . Thread::Backtrace::Location#path

section.center
  p Read-only, presentational APIs.

section.center data-background="#000"
  h2.white Debug Inspector API

section.center
  p Let's you open the VM stack frames and build Binding objects for them.

section.center
  p CRuby specific and available only in C.

section.center
  pre(contenteditable=true): code.c
    '
      typedef struct rb_debug_inspector_struct rb_debug_inspector_t;
      typedef VALUE (*rb_debug_inspector_func_t)(const rb_debug_inspector_t *, void *);

      VALUE rb_debug_inspector_open(rb_debug_inspector_func_t func, void *data);
      VALUE rb_debug_inspector_frame_self_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_class_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_binding_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_iseq_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_backtrace_locations(const rb_debug_inspector_t *dc);

section.center
  pre(contenteditable=true): code.c
    '
      static VALUE st_mSkiptrace;

      static VALUE st_current_bindings(VALUE self)
      {
        return rb_debug_inspector_open(current_bindings_callback, NULL);
      }

      void Init_cruby(void)
      {
        st_mSkiptrace = rb_define_module("Skiptrace");

        rb_define_singleton_method(st_mSkiptrace, "current_bindings", st_current_bindings, 0);
      }
  = copyright "skiptrace", "https://github.com/gsamokovarov/skiptrace"

section.center
  pre(contenteditable=true): code.c
    '
      static VALUE
      current_bindings_callback(const rb_debug_inspector_t *context, void *data)
      {
        VALUE locations = rb_debug_inspector_backtrace_locations(context);
        VALUE binding, bindings = rb_ary_new();
        long i, length = RARRAY_LEN(locations);

        for (i = 0; i < length; i++) {
          binding = rb_debug_inspector_frame_binding_get(context, i);

          if (!NIL_P(binding)) {
            rb_ary_push(bindings, binding);
          }
        }

        return bindings;
      }
  = copyright "skiptrace", "https://github.com/gsamokovarov/skiptrace"

section.center data-background="#000"
  h2.white Editorial

section.center data-background="#000"
  p.white <span class="red">TracePoint</span> is a high-level API.

section.center data-background="#000"
  p.white <span class="red">Debug Inspector</span>, although in C, is a high-level API.

section.center data-background="#000"
  h2 ü§î

section.center data-background="#000"
  p.white Why not expose them to Ruby?

section.center data-background="#00F"
  h4.white DebugInspector#open

section.center
  a href="https://github.com/banister/debug_inspector" github.com/banister/debug_inspector
  = copyright "@banister", "https://github.com/banister/debug_inspector"

section.center
  pre(contenteditable=true): code.ruby
    '
      require 'debug_inspector'

      RubyVM::DebugInspector.open { |dc|
        locs = dc.backtrace_locations

        # you can get depth of stack frame with `locs.size'
        locs.size.times do |i|
          # binding of i-th caller frame (returns a Binding object or nil)
          p dc.frame_binding(i)

          # iseq of i-th caller frame (returns a RubyVM::InstructionSequence object or nil)
          p dc.frame_iseq(i)

          # class of i-th caller frame
          p dc.frame_class(i)
        end
      }
  = copyright "debug_inspector", "https://github.com/banister/debug_inspector"

section.center
  h2 üòÄ

section.center
  h2 ‚òπÔ∏è

section.center data-background-iframe="/error"
  a(href="#" class="navigate-next") &gt;

section.center data-background="#00F"
  h4.white Binding#caller

section.center
  a href="https://github.com/banister/binding_of_caller" github.com/banister/binding_of_caller
  = copyright "@banister", "https://github.com/banister/binding_of_caller"

section.center
  pre(contenteditable=true): code.ruby
    '
      def a
        var = 10
        b
        puts var
      end

      def b
        c
      end

      def c
        binding.of_caller(2).eval('var = :hello')
      end

      a()

      \# OUTPUT
      \# => hello
  = copyright "@banister", "https://github.com/banister/binding_of_caller"

section.center
  h2 üòÄ

section.center
  h2 ‚òπÔ∏è

section.center data-background="#00F"
  h4.white Thread::Backtrace::Location#binding

section.center
  p A suggestion by <a href="https://twitter.com/tom_enebo">@tom_enebo</a> from RubyKaigi 2018.

section.center
  pre(contenteditable=true): code.ruby
    '
      backtrace = caller_locations
      if trace = backtrace[3]
        # C frames cannot build binding.
        trace.binding
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      backtrace = caller_locations
      if trace = backtrace[3]
        # Have optimizing VM like JRuby or TruffleRuby?
        trace.binding
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      backtrace = caller_locations
      if trace = backtrace[3]
        # Return nil for for such frames.
        trace.binding
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      backtrace = caller_locations
      if trace = backtrace[3]
        # Produce a warning, if you wish.
        trace.binding
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      backtrace = caller_locations
      if trace = backtrace[3]
        # No need for trace <=> binding mapping!
        trace.binding
      end

section.center
  h2 üòÄ

section.center data-background="#000"
  p.white The APIs can be implemented by the VM maintainers.

section.center data-background="#000" data-background-transition="none"
  p.white The debuggers can become, more or less, UX work that is portable across VMs.

section.center data-background="#000" data-background-transition="none"
  h2.white Pros & Cons

section.center
  h2 Cons
  ul
    li.fragment Performance!
    li.fragment Dangerous operations?

section.center
  h2 Pros
  ul
    li.fragment Portable debugging tools!
    li.fragment Adoption!

section.center
  a href="https://bugs.ruby-lang.org/issues/15778" bugs.ruby-lang.org/issues/15778

section.center
  img.inline src=image_path("ko1_support.png")

section.center data-background="#000" data-background-transition="none"
  h2.white üòé

section.center data-background="#00F"
  h2.white Break üî®

section.center
  p Debugger written using the <span class="red">TracePoint API</span> in plain <span class="red">Ruby</span>.

section.center
  p Wears the Ruby-only label with pride and considers it a virtue!

section.center
  p Don't support post-mortem debugging and arbitrary frame jumping, because of that.

section.center
  p Provides basic execution handling control ‚Äì step into, step over, etc.

section.center
  p Does not have own frontned, but integrates straight into binding.irb and binding.pry!

section.center data-background-iframe="/console"
  a(href="#" class="navigate-next") &gt;

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::Context
        attr_accessor :bindings :depth

        def initialize(*bindings, depth: 0)
          @bindings = bindings
          @depth = depth
        end

        def binding
          @bindings[@depth - 1]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::Session
        attr_reader :contexts, :frontend

        def initialize(binding, frontend:)
          @contexts = [Context.new(binding)]
          @frontend = frontend
        end

        def enter() frontend.attach(self) end

        def leave() frontend.detach end

        def context() contexts.last end

        def context!(*bindings, depth: 0)
          contexts << Context.new(*bindings, depth: depth)
          enter
        end
      end


section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::NextCommand < Break::TracePointCommand
        trace :line, :call, :return, :class, :end, :b_call, :b_return

        def execute_trace(trace, *)
          case trace.event
          when :call, :class, :b_call
            context.bindings << trace.binding
            context.depth += 1
          when :return, :end, :b_return
            context.bindings.pop
            context.depth -= 1
          when :line
            return if context.depth.positive?

            trace.disable

            context!(*context.bindings[0...-1], trace.binding)
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::TracePointCommand < Break::Command
        def execute(*args)
          TracePoint.trace(*trace_events) do |trace|
            next if Filter.internal?(trace.path)

            execute_trace(trace, *args)
          end

          session.leave
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::StepCommand < Break::TracePointCommand
        trace :line, :call, :return, :class, :end, :b_call, :b_return

        def execute_trace(trace, *)
          case trace.event
          when :call, :class, :b_call
            trace.disable

            context!(*context.bindings, trace.binding)
          when :return, :end, :b_return
            context.bindings.pop
            context.depth -= 1
          when :line
            return if context.depth.positive?

            trace.disable

            context!(*context.bindings[0...-1], trace.binding)
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::UpCommand < Break::TracePointCommand
        def execute(*)
          return super if context.bindings[context.depth - 2]
          frontend.notify("Cannot go further up the stack")
        end

        def execute_trace(trace, *)
          trace.disable

          context!(*context.bindings, depth: context.depth - 1)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class Break::DownCommand < Break::TracePointCommand
        def execute(*)
          if context.depth >= 0
            return frontend.notify("Cannot go further down the stack")
          else
            super
          end
        end

        def execute_trace(trace, *)
          trace.disable

          context!(*context.bindings, depth: context.depth + 1)
        end
      end

section.center
  a href="https://github.com/gsamokovarov/break" github.com/gsamokovarov/break
  p gem install break

section.center data-background="#000"
  h2.white.fragment TL;DR

section.center data-background="#000" data-background-transition="none"
  p.white Writing debuggers may seem daunting, but we have great APIs to do so.

section.center data-background="#000" data-background-transition="none"
  p.white With a little bit of effort, we can remove the need of lower-level code altogether.

section.center data-background="#000" data-background-transition="none"
  p.white Debuggers can be mostly UX work.

section.center data-background="#000" data-background-transition="none"
  p.white Debuggers can be portable.

section data-background="https://3.bp.blogspot.com/-qnppiAuAXV4/VUyfpPDwPsI/AAAAAAAAAi0/uPp7S7aLVt8/s1600/%D0%92%2B%D0%BA%D1%80%D0%B0%D0%BA%2B%D1%81%2B%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D1%82%D0%BE%2B1.jpg"
  h2.shadow.fragment Thank you!

section data-background="https://3.bp.blogspot.com/-qnppiAuAXV4/VUyfpPDwPsI/AAAAAAAAAi0/uPp7S7aLVt8/s1600/%D0%92%2B%D0%BA%D1%80%D0%B0%D0%BA%2B%D1%81%2B%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D1%82%D0%BE%2B1.jpg"
  h2.üôá‚Äç‚ôÇÔ∏è
